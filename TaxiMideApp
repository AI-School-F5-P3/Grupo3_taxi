import time
import logging
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.popup import Popup
from kivy.uix.image import Image

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', handlers=[
    logging.FileHandler("taximetro.log"),
    logging.StreamHandler()
])

class TaxiMideApp(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.taximetro = Taximetro(contraseña='1234')

    def build(self):
        self.layout = BoxLayout(orientation='vertical')

        img = Image(source='icono.png') 
        self.layout.add_widget(img)

        self.label = Label(text='Bienvenido al taxímetro digital.')
        self.layout.add_widget(self.label)

        self.button_start = Button(text='Iniciar Carrera')
        self.button_start.bind(on_press=self.iniciar_carrera)
        self.layout.add_widget(self.button_start)

        
        self.layout_central = BoxLayout(orientation='horizontal')

        self.button_marcha = Button(text='Marcha')
        self.button_marcha.bind(on_press=self.marcha)
        self.layout_central.add_widget(self.button_marcha)

        self.button_stop = Button(text='Parada')
        self.button_stop.bind(on_press=self.parada)
        self.layout_central.add_widget(self.button_stop)

        self.button_end = Button(text='Finalizar Carrera')
        self.button_end.bind(on_press=self.finalizar_carrera)
        self.layout_central.add_widget(self.button_end)

        self.layout.add_widget(self.layout_central)

        
        self.button_config = Button(text='Configurar Tarifas')
        self.button_config.bind(on_press=self.configurar_tarifas)
        self.layout.add_widget(self.button_config)

        self.button_change_pw = Button(text='Cambiar Contraseña')
        self.button_change_pw.bind(on_press=self.cambiar_contraseña)
        self.layout.add_widget(self.button_change_pw)

        return self.layout

    def iniciar_carrera(self):
        self.taximetro.iniciar_carrera()
        self.label.text = 'Carrera iniciada en estado parado.'

    def marcha(self, instance):
        self.taximetro.cambiar_estado(time.time(), True)
        self.label.text = 'Taxi en marcha.'

    def parada(self, instance):
        self.taximetro.cambiar_estado(time.time(), False)
        self.label.text = 'Taxi en parada.'

    def finalizar_carrera(self, instance):
        self.taximetro.finalizar_carrera(time.time())
        self.label.text = f'Total a cobrar: {self.taximetro.total_euros:.2f} euros.'

    def configurar_tarifas(self, instance):
        self.taximetro.configurar_tarifas()
        self.label.text = 'Tarifas configuradas.'

    def cambiar_contraseña(self, instance):
        self.taximetro.cambiar_contraseña()
        self.label.text = 'Contraseña cambiada.'

class Taximetro:
    def __init__(self, contraseña):
        self.tarifa_parado = 0.02
        self.tarifa_movimiento = 0.05
        self.tiempo_total = 0
        self.total_euros = 0
        self.en_movimiento = False
        self.tiempo_ultimo_cambio = time.time()
        self.tiempo_parado = 0
        self.tiempo_movimiento = 0
        self.contraseña = contraseña
        self.autenticado = False
        logging.info("Taxímetro iniciado con tarifas por defecto y contraseña establecida.")

    def iniciar_carrera(self):
        self.autenticar()
        if self.autenticado:
            logging.info("Nueva sesión iniciada.")
            self.tiempo_ultimo_cambio = time.time()
            self.en_movimiento = False

    def autenticar(self):
        if self.autenticado:
            return

        content = BoxLayout(orientation='vertical')
        self.password_input = TextInput(password=True, multiline=False)
        content.add_widget(Label(text='Ingresa la contraseña para continuar:'))
        content.add_widget(self.password_input)

        popup = Popup(title='Autenticación', content=content, size_hint=(0.8, 0.4),
                      auto_dismiss=False)
        btn = Button(text='Confirmar')
        btn.bind(on_press=lambda x: self.check_password(popup))
        content.add_widget(btn)

        popup.open()

    def check_password(self, popup):
        if self.password_input.text == self.contraseña:
            self.autenticado = True
            logging.info("Contraseña correcta. Acceso concedido.")
            popup.dismiss()
        else:
            logging.warning("Intento de acceso con contraseña incorrecta.")
            self.password_input.text = ''
            popup.title = 'Contraseña incorrecta. Inténtalo de nuevo.'

    def configurar_tarifas(self):
        if not self.autenticado:
            logging.warning("No se ha autenticado. Debes autenticarte para configurar las tarifas.")
            self.show_message("Configuración de Tarifas", "Debes autenticarte para configurar las tarifas.")
            return

        content = BoxLayout(orientation='vertical')
        self.tarifa_parado_input = TextInput(multiline=False)
        self.tarifa_movimiento_input = TextInput(multiline=False)
        content.add_widget(Label(text='Introduce la nueva tarifa en parada (€/minuto):'))
        content.add_widget(self.tarifa_parado_input)
        content.add_widget(Label(text='Introduce la nueva tarifa en movimiento (€/minuto):'))
        content.add_widget(self.tarifa_movimiento_input)

        popup = Popup(title='Configurar Tarifas', content=content, size_hint=(0.8, 0.6),
                      auto_dismiss=False)
        btn = Button(text='Confirmar')
        btn.bind(on_press=lambda x: self.update_tarifas(popup))
        content.add_widget(btn)

        popup.open()

    def update_tarifas(self, popup):
        try:
            self.tarifa_parado = float(self.tarifa_parado_input.text)
            self.tarifa_movimiento = float(self.tarifa_movimiento_input.text)
            logging.info("Tarifas actualizadas a parada: %.2f, movimiento: %.2f", self.tarifa_parado, self.tarifa_movimiento)
            popup.dismiss()
        except ValueError:
            logging.error("Error al introducir tarifas. Valores no numéricos.")
            self.show_message("Error", "Error al introducir tarifas. Introduce valores numéricos válidos.")

    def cambiar_contraseña(self):
        if not self.autenticado:
            logging.warning("No se ha autenticado. Debes autenticarte para cambiar la contraseña.")
            self.show_message("Cambiar Contraseña", "Debes autenticarte para cambiar la contraseña.")
            return

        content = BoxLayout(orientation='vertical')
        self.new_password_input = TextInput(password=True, multiline=False)
        self.confirm_password_input = TextInput(password=True, multiline=False)
        content.add_widget(Label(text='Introduce la nueva contraseña:'))
        content.add_widget(self.new_password_input)
        content.add_widget(Label(text='Confirma la nueva contraseña:'))
        content.add_widget(self.confirm_password_input)

        popup = Popup(title='Cambiar Contraseña', content=content, size_hint=(0.8, 0.6),
                      auto_dismiss=False)
        btn = Button(text='Confirmar')
        btn.bind(on_press=lambda x: self.update_password(popup))
        content.add_widget(btn)

        popup.open()

    def update_password(self, popup):
        if self.new_password_input.text == self.confirm_password_input.text:
            self.contraseña = self.new_password_input.text
            logging.info("Contraseña cambiada exitosamente.")
            popup.dismiss()
        else:
            logging.warning("La nueva contraseña no coincide con la confirmación.")
            self.show_message("Cambiar Contraseña", "La nueva contraseña no coincide con la confirmación.")

    def cambiar_estado(self, tiempo_actual, en_movimiento):
        tiempo_transcurrido = tiempo_actual - self.tiempo_ultimo_cambio
        if self.en_movimiento:
            self.tiempo_movimiento += tiempo_transcurrido
        else:
            self.tiempo_parado += tiempo_transcurrido

        self.en_movimiento = en_movimiento
        self.tiempo_ultimo_cambio = tiempo_actual
        estado = "movimiento" if en_movimiento else "parado"
        logging.info(f"Taxi en {estado}.")

    def finalizar_carrera(self, tiempo_actual):
        tiempo_transcurrido = tiempo_actual - self.tiempo_ultimo_cambio
        if self.en_movimiento:
            self.tiempo_movimiento += tiempo_transcurrido
        else:
            self.tiempo_parado += tiempo_transcurrido

        self.total_euros = (self.tiempo_movimiento * self.tarifa_movimiento) + (self.tiempo_parado * self.tarifa_parado)
        mensaje = f"Total a cobrar: {self.total_euros:.2f} euros"
        logging.info(mensaje)
        self.show_message("Finalizar Carrera", mensaje)

        self.resetear_valores()

    def resetear_valores(self):
        self.tiempo_total = 0
        self.total_euros = 0
        self.en_movimiento = False
        self.tiempo_ultimo_cambio = time.time()
        self.tiempo_parado = 0
        self.tiempo_movimiento = 0

    def show_message(self, title, message):
        popup = Popup(title=title, content=Label(text=message), size_hint=(0.8, 0.4))
        popup.open()

if __name__ == '__main__':
    TaxiMideApp().run()
